version: '3.8'

services:
  redis:
    image: ${REDIS_IMAGE:-redis:alpine}
    restart: unless-stopped
    container_name: $APP_NAME-redis
    volumes:
      - redis_data:/data
    networks:
      - default
    deploy:
      resources:
        limits:
          cpus: '${REDIS_CPU_LIMIT:-0.5}'
          memory: ${REDIS_MEMORY_LIMIT:-256M}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}
    security_opt:
      - no-new-privileges:true

  nginx:
    image: ${NGINX_IMAGE:-nginx:stable-alpine}
    container_name: $APP_NAME-nginx
    restart: unless-stopped
    environment:
      - URL_PREFIX=${URL_PREFIX}
      - APP_INTERNAL_PORT=${APP_INTERNAL_PORT:-8000}
      - NGINX_INTERNAL_PORT=${NGINX_INTERNAL_PORT:-8001}
    volumes:
      # Nginx 官方镜像支持模板自动处理：
      # 将 .template 文件挂载到 /etc/nginx/templates/ 目录
      # 容器启动时会自动使用 envsubst 处理环境变量并生成配置文件
      - ./nginx.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./media:/www/media:ro
      - static_volume:/www/static-dist:ro
      - ./log/nginx:/var/log/nginx
    ports:
      - ${APP_PORT}:${NGINX_INTERNAL_PORT:-8001}
    depends_on:
      - redis
      - app
    networks:
      - default
    deploy:
      resources:
        limits:
          cpus: '${NGINX_CPU_LIMIT:-0.3}'
          memory: ${NGINX_MEMORY_LIMIT:-128M}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${NGINX_INTERNAL_PORT:-8001}${URL_PREFIX}/api/django-starter/monitoring/health/"]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}
    security_opt:
      - no-new-privileges:true

  app:
    image: ${APP_IMAGE_NAME}:${APP_IMAGE_TAG}
    container_name: $APP_NAME-app
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_BASE: ${PYTHON_VERSION:-3.11}
        NODE_BASE: ${NODE_VERSION:-18}
    restart: always
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-docker}
      - URL_PREFIX=${URL_PREFIX}
      - DEBUG=${DEBUG:-false}
      - TZ=${TZ:-Asia/Shanghai}
    command: >
      sh -c "
      echo 'Starting the application...' &&
      cp -r /project/static-dist/* /project/static-volume/ &&
      exec daphne -b 0.0.0.0 -p ${APP_INTERNAL_PORT:-8000} -v 3 --proxy-headers config.asgi:application
      "
    volumes:
      - ./media:/project/media
      - ./db.sqlite3:/project/db.sqlite3
      - static_volume:/project/static-volume
      - ./log/app:/project/log
    # 生产环境应移除源代码挂载
    # - ./src:/project/src
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - default
    deploy:
      resources:
        limits:
          cpus: '${APP_CPU_LIMIT:-1.0}'
          memory: ${APP_MEMORY_LIMIT:-512M}
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:${APP_INTERNAL_PORT:-8000}${URL_PREFIX}/api/django-starter/monitoring/health/'); exit(0 if r.status_code == 200 else 1)"]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}
    security_opt:
      - no-new-privileges:true

  prometheus:
    image: ${PROMETHEUS_IMAGE:-prom/prometheus:latest}
    container_name: $APP_NAME-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-200h}'
      - '--web.enable-lifecycle'
    networks:
      - default
    deploy:
      resources:
        limits:
          cpus: '${PROMETHEUS_CPU_LIMIT:-0.5}'
          memory: ${PROMETHEUS_MEMORY_LIMIT:-256M}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}
    security_opt:
      - no-new-privileges:true

  grafana:
    image: ${GRAFANA_IMAGE:-grafana/grafana:latest}
    container_name: $APP_NAME-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=${GRAFANA_ALLOW_SIGN_UP:-false}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    networks:
      - default
    deploy:
      resources:
        limits:
          cpus: '${GRAFANA_CPU_LIMIT:-0.3}'
          memory: ${GRAFANA_MEMORY_LIMIT:-128M}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: ${HEALTHCHECK_INTERVAL:-30s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}
    security_opt:
      - no-new-privileges:true

  backup:
    image: ${BACKUP_IMAGE:-alpine:latest}
    container_name: $APP_NAME-backup
    restart: "no"
    volumes:
      - ./db.sqlite3:/backup/db.sqlite3:ro
      - ./media:/backup/media:ro
      - ./backup:/backup/output
    command: >
      sh -c "
      echo 'Creating backup...' &&
      tar -czf /backup/output/backup-$(date +%Y%m%d-%H%M%S).tar.gz -C /backup db.sqlite3 media &&
      echo 'Backup completed.'
      "
    networks:
      - default
    deploy:
      resources:
        limits:
          cpus: '${BACKUP_CPU_LIMIT:-0.2}'
          memory: ${BACKUP_MEMORY_LIMIT:-64M}
    security_opt:
      - no-new-privileges:true

volumes:
  static_volume:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: $APP_NAME