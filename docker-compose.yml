version: '3.8'

services:
  redis:
    image: redis:alpine
    restart: unless-stopped
    container_name: $APP_NAME-redis
    expose:
      - 6379
    volumes:
      - redis_data:/data
    networks:
      - default
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true

  nginx:
    image: nginx:stable-alpine
    container_name: $APP_NAME-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./media:/www/media:ro
      - static_volume:/www/static-dist:ro
      - ./log/nginx:/var/log/nginx
    ports:
      - ${APP_PORT}:8001
    depends_on:
      - redis
      - app
    networks:
      - default
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8001/api/django-starter/monitoring/health/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true

  app:
    image: ${APP_IMAGE_NAME}:${APP_IMAGE_TAG}
    container_name: $APP_NAME-app
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_BASE: ${PYTHON_VERSION:-3.11}
        NODE_BASE: ${NODE_VERSION:-18}
    restart: always
    environment:
      - ENVIRONMENT=docker
      - URL_PREFIX=
      - DEBUG=false
      - TZ=Asia/Shanghai
    command: >
      sh -c "
      echo 'Starting the application...' &&
      cp -r /project/static-dist/* /project/static-volume/ &&
      exec daphne -b 0.0.0.0 -p 8000 -v 3 --proxy-headers config.asgi:application
      "
    volumes:
      - ./media:/project/media
      - ./db.sqlite3:/project/db.sqlite3
      - static_volume:/project/static-volume
      - ./log/app:/project/log
    # 生产环境应移除源代码挂载
    # - ./src:/project/src
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - default
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:8000/api/django-starter/monitoring/health/'); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true

  prometheus:
    image: prom/prometheus:latest
    container_name: $APP_NAME-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - default
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  grafana:
    image: grafana/grafana:latest
    container_name: $APP_NAME-grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - default
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true

  backup:
    image: alpine:latest
    container_name: $APP_NAME-backup
    volumes:
      - ./db.sqlite3:/backup/db.sqlite3:ro
      - ./backups:/backups
    command: >
      sh -c "
      apk add --no-cache sqlite && 
      mkdir -p /backups &&
      echo '0 2 * * * sqlite3 /backup/db.sqlite3 .dump > /backups/db_backup_`date +\%Y\%m\%d`.sql' > /etc/crontabs/root &&
      echo '0 3 * * 0 find /backups -name \"db_backup_*.sql\" -type f -mtime +30 -delete' >> /etc/crontabs/root &&
      crond -f
      "
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    security_opt:
      - no-new-privileges:true

volumes:
  static_volume:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: $APP_NAME